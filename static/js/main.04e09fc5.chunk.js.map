{"version":3,"sources":["components/Statistics/Statistics.styles.jsx","components/Statistics/Statistics.jsx","components/Section/Section.styles.jsx","components/Section/Section.jsx","components/Notification/Notification.styles.jsx","components/Notification/Notification.jsx","components/FeedbackOptions/FeedbackOptions.styles.jsx","components/FeedbackOptions/FeedbackOptions.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["StatList","styled","ul","StatItem","li","Statistics","this","props","good","neutral","bad","total","positivePercentage","Component","SectionText","p","Section","title","children","Notification","message","FeedbackButtons","div","CustomButton","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","App","state","e","value","currentTarget","textContent","setState","prevState","totalFeedbacks","countTotalFeedback","Math","round","countPositiveFeedbackPercentage","Object","keys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSACaA,EAAWC,IAAOC,GAAV,oEAIRC,EAAWF,IAAOG,GAAV,+M,OCqBNC,E,4JAtBb,WACE,MAA0DC,KAAKC,MAAvDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBACnC,OACE,eAACZ,EAAD,WACE,eAACG,EAAD,oBAAiBK,KACjB,eAACL,EAAD,uBAAoBM,KACpB,eAACN,EAAD,mBAAgBO,KAChB,eAACP,EAAD,qBAAkBQ,KAClB,eAACR,EAAD,iCAA8BS,EAA9B,c,GATiBC,aCFZC,EAAcb,IAAOc,EAAV,6MCWTC,I,EAAAA,EATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,qCACE,cAACJ,EAAD,UAAcG,IACbC,MCNMJ,EAAcb,IAAOc,EAAV,iLCMTI,I,IAAAA,EAJf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,cAAC,EAAD,UAAcA,KCHVC,EAAkBpB,IAAOqB,IAAV,6FAKfC,EAAetB,IAAOuB,OAAV,omBCkBVC,E,4JAlBb,WACE,MAAqCnB,KAAKC,MAAlCmB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,gBACjB,OACE,cAACN,EAAD,UACGK,EAAQE,KAAI,SAACC,GAAD,OACX,cAACN,EAAD,CAA2BO,KAAK,SAASC,QAASJ,EAAlD,SACGE,GADgBA,Y,GANChB,aCgEfmB,G,kNA7DbC,MAAQ,CACNzB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAQPiB,gBAAkB,SAACO,GACjB,IAAMC,EAAQD,EAAEE,cAAcC,YAC9B,EAAKC,UAAS,SAACC,GACb,OAAO,eACJJ,EAAQI,EAAUJ,GAAS,O,wDATlC,WACE,MAA+B7B,KAAK2B,MACpC,OADA,EAAQzB,KAAR,EAAcC,QAAd,EAAuBC,M,6CAazB,WACE,IAAQF,EAASF,KAAK2B,MAAdzB,KACFgC,EAAiBlC,KAAKmC,qBAK5B,OAFW,IAATjC,EAAakC,KAAKC,MAAc,IAAPnC,EAAcgC,GAAkB,I,oBAI7D,WACE,MAA+BlC,KAAK2B,MAA5BzB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQL,KAAKmC,qBACb7B,EAAqBN,KAAKsC,kCAC1BlB,EAAUmB,OAAOC,KAAKxC,KAAK2B,OAEjC,OACE,qCACE,cAAC,EAAD,CAAShB,MAAO,wBAAhB,SACE,cAAC,EAAD,CACES,QAASA,EACTC,gBAAiBrB,KAAKqB,oBAI1B,cAAC,EAAD,CAASV,MAAM,aAAf,SACGN,EAAQ,EACP,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,cAAC,EAAD,CAAcQ,QAAS,+B,GAvDjBP,cCKHkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.04e09fc5.chunk.js","sourcesContent":["import styled from '@emotion/styled'\r\nexport const StatList = styled.ul`\r\n  margin: 0 auto;\r\n  overflow: hidden;\r\n`\r\nexport const StatItem = styled.li`\r\n  display: flex;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  /* text-transform: uppercase; */\r\n  color: #0c1b42;\r\n`\r\n","import { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { StatList, StatItem } from './Statistics.styles'\r\nclass Statistics extends Component {\r\n  render() {\r\n    const { good, neutral, bad, total, positivePercentage } = this.props\r\n    return (\r\n      <StatList>\r\n        <StatItem>Good: {good}</StatItem>\r\n        <StatItem>Neutral: {neutral}</StatItem>\r\n        <StatItem>Bad: {bad}</StatItem>\r\n        <StatItem>Total: {total}</StatItem>\r\n        <StatItem>Positive feedback: {positivePercentage}%</StatItem>\r\n      </StatList>\r\n    )\r\n  }\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Statistics\r\n","import styled from '@emotion/styled'\r\nexport const SectionText = styled.p`\r\n  padding: 10px;\r\n  margin-left: 40px;\r\n  margin-bottom: 10px;\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n  line-height: 24px;\r\n  text-transform: uppercase;\r\n  color: #0c1b42;\r\n`\r\n","import PropTypes from 'prop-types'\r\nimport { SectionText } from './Section.styles'\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <>\r\n      <SectionText>{title}</SectionText>\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Section\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n}\r\n","import styled from '@emotion/styled'\r\nexport const SectionText = styled.p`\r\n  padding: 10px;\r\n  margin-left: 40px;\r\n  margin-bottom: 10px;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  color: #1860bec1;\r\n`\r\n","import PropTypes from 'prop-types'\r\nimport { SectionText } from './Notification.styles'\r\n\r\nfunction Notification({ message }) {\r\n  return <SectionText>{message}</SectionText>\r\n}\r\n\r\nexport default Notification\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n}\r\n","import styled from '@emotion/styled'\r\nexport const FeedbackButtons = styled.div`\r\n  padding: 10px 40px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\nexport const CustomButton = styled.button`\r\n  margin-right: 40px;\r\n  width: 120px;\r\n  background-color: #e5ebf3;\r\n  border-radius: 4px;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  color: #0c1b42;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\r\n  :hover {\r\n    border-radius: 4px;\r\n    background-color: #61b0d4;\r\n    transition-duration: 250ms;\r\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n    box-shadow: 0 12px 16px 0 #278cbb3d, 0 17px 50px 0 #1f3d9e30;\r\n  }\r\n`\r\n","import { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FeedbackButtons } from './FeedbackOptions.styles.jsx'\r\nimport { CustomButton } from './FeedbackOptions.styles.jsx'\r\n\r\nclass FeedbackOptions extends Component {\r\n  render() {\r\n    const { options, onLeaveFeedback } = this.props\r\n    return (\r\n      <FeedbackButtons>\r\n        {options.map((option) => (\r\n          <CustomButton key={option} type=\"button\" onClick={onLeaveFeedback}>\r\n            {option}\r\n          </CustomButton>\r\n        ))}\r\n      </FeedbackButtons>\r\n    )\r\n  }\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n}\r\nexport default FeedbackOptions\r\n","import { Component } from 'react'\nimport Statistics from './components/Statistics/Statistics'\nimport Section from './components/Section/Section'\nimport Notification from './components/Notification/Notification'\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions'\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  }\n\n  countTotalFeedback() {\n    const { good, neutral, bad } = this.state\n    return good + neutral + bad\n  }\n\n  onLeaveFeedback = (e) => {\n    const value = e.currentTarget.textContent\n    this.setState((prevState) => {\n      return {\n        [value]: prevState[value] + 1,\n      }\n    })\n  }\n\n  countPositiveFeedbackPercentage() {\n    const { good } = this.state\n    const totalFeedbacks = this.countTotalFeedback()\n\n    const positiveFeedbacks =\n      good !== 0 ? Math.round((good * 100) / totalFeedbacks) : 0\n\n    return positiveFeedbacks\n  }\n  render() {\n    const { good, neutral, bad } = this.state\n    const total = this.countTotalFeedback()\n    const positivePercentage = this.countPositiveFeedbackPercentage()\n    const options = Object.keys(this.state)\n\n    return (\n      <>\n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {total > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          ) : (\n            <Notification message={'No feedback given'} />\n          )}\n        </Section>\n      </>\n    )\n  }\n}\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}